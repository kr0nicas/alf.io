default:
  image: docker:latest


variables:
    GRADLE_OPTS: "-Dorg.gradle.daemon=false"
    GRADLE_OPTS: "-Dorg.gradle.daemon=false"
     # improved performance.
    DOCKER_DRIVER: overlay2
    # Specify to Docker where to create the certificates, Docker will
    # create them automatically on boot, and will create
    # `/certs/client` that will be shared between the service and
    # build container.
    DOCKER_TLS_CERTDIR: "/certs"

# Make the gradle wrapper executable. This essentially downloads a copy of
# Gradle to build the project with.
# https://docs.gradle.org/current/userguide/gradle_wrapper.html
# It is expected that any modern gradle project has a wrapper
before_script:
    - echo `pwd`
    - echo `ls`
    - echo `whoami`
    #- chmod +x gradlew
    - export GRADLE_USER_HOME=`pwd`/.gradle

stages:
  - build
  - package
  #- deploy

build:
  image: gradle:5.0-jdk8-alpine
  stage: build
  script:
      - ./gradlew -g /cache/.gradle clean assemble
  allow_failure: false
  script: gradle --build-cache assemble
  cache:
      key: "$CI_COMMIT_REF_NAME"
      policy: push
      paths:
          - build
          - .gradle
  artifacts:
    paths:
      - build/dockerize
  tags:
      - environment:development

package:
  stage: package
  script:
    - cd ./src/main/dist/
    - echo `pwd`
    - docker build -t registry.gitlab.com/itproject41/eco-tickets .
    #- docker build -t registry.gitlab.com/mathflake/api .
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN registry.gitlab.com
    - docker push registry.gitlab.com/itproject41/eco-tickets
  tags:
       - environment:development